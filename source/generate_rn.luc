module generate_rn 
#(
    SEED = 678120348,
    FAST_CLOCK_DIV ~ 20
)
(
    input clk,  // clock
    input rst,
    output out[32]
) {
    
    const GENERATE_NUMBER_CLOCK_SPEED = FAST_CLOCK_DIV + 1
    .clk(clk){

        .rst(rst){
            counter seed_clock(#SIZE(1),#DIV(FAST_CLOCK_DIV)) 
            counter generate_next_number_clock(#SIZE(1), #DIV(GENERATE_NUMBER_CLOCK_SPEED))
            pn_gen random_number
        }
        
        edge_detector edge_detector_next(.in(generate_next_number_clock.value))
        edge_detector edge_detector_seed(.in(seed_clock.value))
        dff seed[16] // not globally reset
        dff randomnumber[32]
        
    }
    
    always {
        out = 0
        random_number.seed = seed.q
        random_number.next = edge_detector_next.out
        
        if(edge_detector_seed.out){
            seed.d = seed.q + 1
        }
        
        randomnumber.d=random_number.num
        out = randomnumber.q
        
    }
}