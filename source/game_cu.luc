module game_cu (
    input clk,
    input rst,
    input interval1,
    input interval2,
    input interval3,
    input decrease_timer,
    input regfile_rd2[32], //i do actually need this
    
    input button1,
    input button2,
    input button3,
    input button4,
    input button5,
    input button6,
    input buttonstart,
    
    output alufn[6],
    output asel[2],
    output bsel[4],
    output alu_out_sel[3],
    output regfile_wa[5],
    output regfile_ra1[5],
    output regfile_ra2[5],
    output regfile_we,
    output debug[4]
) {
    enum GameStates{
        START_SET_TIMER,
        WAIT_TO_START,
        
        IDLE,
        
        CHECK_TIMER_EQ0,
        BRANCH_TIMER_EQ0,
        DECREASE_TIMER,
        
        INTERVAL_CHECK_LEVEL1,
        INTERVAL_CHECK_LEVEL2,
        INTERVAL_CHECK_LEVEL3,
        BRANCH_INTERVAL_CHECK_LEVEL1,
        BRANCH_INTERVAL_CHECK_LEVEL2,
        BRANCH_INTERVAL_CHECK_LEVEL3,
        
        MODE_CHECK_EQ1,
        BRANCH_MODE_CHECK_EQ1,
        
        MODE_CHECK_EQ0,
        BRANCH_MODE_CHECK_EQ0,
        
        COOLDOWN_EQ0,
        BRANCH_COOLDOWN_EQ0,
        DECREASE_COOLDOWN,
        RESET_MODE_1,
        
        AWAKE_EQ0,
        BRANCH_AWAKE_EQ0,
        DECREASE_AWAKE,
        RESET_ACTIVE_BUTTON_0,
        RESET_ACTIVE_TYPE_0,
        RESET_MODE_0,
        
        GENERATE_BUTTONMAP, //todo
        SET_ACTIVE_BUTTON, //todo
        SET_ACTIVE_TYPE, //todo
        SET_AWAKE, //todo
        SET_COOLDOWN, //todo
        RESET_MODE_2,
        
        B1_IS_ACTIVE_BUTTON,
        B2_IS_ACTIVE_BUTTON,
        B3_IS_ACTIVE_BUTTON,
        B4_IS_ACTIVE_BUTTON,
        B5_IS_ACTIVE_BUTTON,        
        B6_IS_ACTIVE_BUTTON,
        BRANCH_IS_ACTIVE_BUTTON,
        
        IS_THIS_THE_KILLBUTTON,
        
        END
    }
    dff game_fsm[$width(GameStates)](#INIT(GameStates.START_SET_TIMER), .clk(clk), .rst(rst))
    always {
        alufn=0
        asel=0
        bsel=0
        alu_out_sel=0
        regfile_wa=d9 //just in case we just send them somehwere
        regfile_ra1=0
        regfile_ra2=0
        regfile_we=0
        debug=0
        
        game_fsm.d=game_fsm.q
        if (rst){
            game_fsm.d=GameStates.START_SET_TIMER
        }
        else{
            case(game_fsm.q){
                //TIMER STUFF
                GameStates.START_SET_TIMER:
                    alufn=b000000 //ADD
                    regfile_ra1=d0 //timer
                    asel=b00 //Ra
                    bsel=b1000 //60
                    regfile_we=1
                    regfile_wa=d0 //timer
                    game_fsm.d=GameStates.WAIT_TO_START
                GameStates.WAIT_TO_START:
                    if(buttonstart){
                        game_fsm.d=GameStates.IDLE
                        }
                    else{
                        game_fsm.d=GameStates.WAIT_TO_START
                        }
                GameStates.CHECK_TIMER_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d0 //timer
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb
                    regfile_we=1
                    regfile_wa=d9 //Temp for comparisons
                    game_fsm.d=GameStates.BRANCH_TIMER_EQ0
                GameStates.BRANCH_TIMER_EQ0:
                    regfile_ra2=d9 //Temp for comparisons
                    if (regfile_rd2[0]){
                        game_fsm.d=GameStates.END
                        }
                    else{
                        game_fsm.d=GameStates.DECREASE_TIMER
                        }
                GameStates.DECREASE_TIMER:
                    alufn=b000001 //SUB
                    regfile_ra1=d0 //timer
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_we=1
                    regfile_wa=d0 //timer
                    game_fsm.d=GameStates.IDLE
                //---------END OF TIMERSTUFF---------------------------------
                
               
                //CHECKING LEVEL INTERVALS
                GameStates.INTERVAL_CHECK_LEVEL1:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d4 //levelcounter
                    regfile_ra2=d31 //0 (Level 1 is 0)
                    asel=b00 //Ra
                    bsel=b0000 //Rb
                    regfile_we=1
                    regfile_wa=d9 //Temp for comparisons
                    game_fsm.d=GameStates.BRANCH_INTERVAL_CHECK_LEVEL1
                GameStates.BRANCH_INTERVAL_CHECK_LEVEL1:
                    regfile_ra2=d9 //Temp for Cmp
                    if(regfile_rd2[0]){
                        //if it truly is level 1
                        game_fsm.d=GameStates.MODE_CHECK_EQ1
                        }else{
                            //If it is not level one, we do not trigger on this interval. Go back and WAIT YOUR TURN!!!
                            game_fsm.d=GameStates.IDLE
                        }
                GameStates.INTERVAL_CHECK_LEVEL2:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d4 //levelcounter
                    asel=b00 //Ra
                    bsel=b0001 //1 (Level 2 is 1)
                    regfile_we=1
                    regfile_wa=d9
                    game_fsm.d=GameStates.BRANCH_INTERVAL_CHECK_LEVEL2
                GameStates.BRANCH_INTERVAL_CHECK_LEVEL2:
                    regfile_ra2=d9 //Temp for Cmp
                    if(regfile_rd2[0]){                    
                        //If it is truly level 2 move on
                        game_fsm.d=GameStates.MODE_CHECK_EQ1
                        }else{
                        //If it is not level 2, go back and wait
                        game_fsm.d=GameStates.IDLE
                    }
                GameStates.INTERVAL_CHECK_LEVEL3:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d4 //levelcounter
                    asel=b00 //Ra
                    bsel=b0010 //2 (Level 3 is 2)
                    regfile_we=1
                    regfile_wa=d9
                    game_fsm.d=GameStates.BRANCH_INTERVAL_CHECK_LEVEL3
                GameStates.BRANCH_INTERVAL_CHECK_LEVEL3:
                    regfile_ra2=d9 //Temp for Cmp
                    if(regfile_rd2[0]){
                        //If truly level 3, move on
                        game_fsm.d=GameStates.MODE_CHECK_EQ1
                    }else{
                        //if not, go back and wait
                        game_fsm.d=GameStates.IDLE
                    }
                //---------END OF LEVELINTERVALSTUFF---------------------------------
                
                
                //MODE CHECKING FOR 1 (CAN WE PROGRESS WITH BUTTON GENERATION?)
                GameStates.MODE_CHECK_EQ1:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d3 //mode
                    asel=b00 //Ra
                    bsel=b0001 //1 (Mode 1 is ready to generate new button)
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_MODE_CHECK_EQ1
                GameStates.BRANCH_MODE_CHECK_EQ1:
                    regfile_ra2=d9 //Temp for Cmp
                    if(regfile_rd2[0]){
                        game_fsm.d=GameStates.GENERATE_BUTTONMAP
                    }else{
                        //if mode is not 1, then it is 0/2
                        //go to check mode 0
                        game_fsm.d=GameStates.MODE_CHECK_EQ0
                    }
                //---------END OF MODECHECK1---------------------------------
                
                
                //MODE CHECKING FOR 0 (ARE WE IN ACTIVE BUTTON STATE OR COOLDOWN STATE?)
                GameStates.MODE_CHECK_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d3 //mode
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_MODE_CHECK_EQ0
                GameStates.BRANCH_MODE_CHECK_EQ0:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //if mode is 0, we are in cooldown mode
                        //check cooldown
                        game_fsm.d=GameStates.COOLDOWN_EQ0
                    }else{
                        //we are in button active mode
                        //check awake
                        game_fsm.d=GameStates.AWAKE_EQ0
                    }
                //---------END OF MODECHECK0---------------------------------

                
                //COOLDOWN DECREMENTERS AND STUFF
                GameStates.COOLDOWN_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d8 //Cooldown
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_COOLDOWN_EQ0
                GameStates.BRANCH_COOLDOWN_EQ0:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If cooldown is 0. We are ready to generate buttons again
                        //Reset mode to 1
                        game_fsm.d=GameStates.RESET_MODE_1
                    }else{
                        //otherwise, we need to decrease the cooldown this interval
                        //go to decrease cooldown
                        game_fsm.d=GameStates.DECREASE_COOLDOWN
                    }
                GameStates.DECREASE_COOLDOWN:
                    alufn=b000001//SUB
                    regfile_ra1=d8 //Cooldown
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_we=1
                    regfile_wa=d8 //Cooldown
                    game_fsm.d=GameStates.IDLE
                GameStates.RESET_MODE_1:
                    //we add 0 to 1 and write it to mode
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel= b0001 //1
                    regfile_we=1
                    regfile_wa=d3 //mode
                    game_fsm.d=GameStates.IDLE
                //---------END OF COOLDOWNSTUFF---------------------------------
                
                
                //AWAKESTUFF
                GameStates.AWAKE_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d5 //Awake
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_AWAKE_EQ0
                GameStates.BRANCH_AWAKE_EQ0:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If our awake is 0, our buttons need to turn off now
                        //reset mode to 0
                        game_fsm.d=GameStates.RESET_ACTIVE_BUTTON_0
                    }else{
                        //If our awake is not 0, decrease
                        game_fsm.d=GameStates.DECREASE_AWAKE
                    }
                GameStates.DECREASE_AWAKE:
                    alufn=b000001 //SUB
                    regfile_ra1=d5 //awake
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_we=1
                    regfile_wa=d5 //awake
                    game_fsm.d=GameStates.IDLE
                GameStates.RESET_MODE_0:
                    alufn=b000001 //SUB
                    asel=b01 //5
                    bsel=b0101 //5
                    regfile_we=1
                    regfile_wa=d3
                    game_fsm.d=GameStates.IDLE
                //---------END OF AWAKESTUFF---------------------------------

                 
                //RESET BUTTONS
                GameStates.RESET_ACTIVE_BUTTON_0:
                    alufn=b000001 //SUB
                    asel=b01 //5
                    bsel=b0101 //5
                    regfile_we=1
                    regfile_wa=d6 //activebutton
                    game_fsm.d=GameStates.RESET_ACTIVE_TYPE_0
                GameStates.RESET_ACTIVE_TYPE_0:
                    alufn=b000001 //SUB
                    asel=b01 //5
                    bsel=b0101 //5
                    regfile_we=1
                    regfile_wa=d7 //activetype
                    game_fsm.d=GameStates.RESET_MODE_0
                //---------END OF BUTTON RESETS--------------------------------
                
                              
                //BUTTON GENERATION STUFF
                GameStates.GENERATE_BUTTONMAP:
                    game_fsm.d=GameStates.SET_ACTIVE_BUTTON
                GameStates.SET_ACTIVE_BUTTON:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00
                    bsel=b0001 //1 for now
                    regfile_we=1
                    regfile_wa=d6 //activebutton
                    game_fsm.d=GameStates.SET_ACTIVE_TYPE
                GameStates.SET_ACTIVE_TYPE:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00
                    bsel=b0001 //button type 1
                    regfile_we=1
                    regfile_wa=d7//activetype
                    game_fsm.d=GameStates.SET_AWAKE
                GameStates.SET_AWAKE:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0101 //5
                    regfile_we=1
                    regfile_wa=d5 //awake
                    game_fsm.d=GameStates.SET_COOLDOWN
                GameStates.SET_COOLDOWN:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0101 //5
                    regfile_we=1
                    regfile_wa=d8 //cooldown
                    game_fsm.d=GameStates.RESET_MODE_2
                GameStates.RESET_MODE_2:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0010 //2
                    regfile_we=1
                    regfile_wa=d3 //mode
                    game_fsm.d=GameStates.IDLE
                //---------END OF BUTTON GENERATION--------------------------------
                
                
                //BUTTON INPUT CHECKING
                    //B1_IS_ACTIVE_BUTTON,
                    //B2_IS_ACTIVE_BUTTON,
                    //B3_IS_ACTIVE_BUTTON,
                    //B4_IS_ACTIVE_BUTTON,
                    //B5_IS_ACTIVE_BUTTON,        
                    //B6_IS_ACTIVE_BUTTON,
                    //BRANCH_IS_ACTIVE_BUTTON,
                GameStates.B1_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0001 //1 (For button 1)
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                GameStates.B2_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0010 //2 (for button 2)
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                GameStates.B3_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0011 //3 (for button 3)
                    regfile_we=1
                    regfile_wa=d9 //Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                GameStates.B4_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0100 //4 (for button 4)
                    regfile_we=1
                    regfile_wa=d9//Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                GameStates.B5_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0101 //5 (for button 5)
                    regfile_we=1
                    regfile_wa=d9//Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                GameStates.B6_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0110 //6 (for button 6)
                    regfile_we=1
                    regfile_wa=d9//Temp for Cmp
                    game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                GameStates.BRANCH_IS_ACTIVE_BUTTON:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If this button really is the button, see if we die
                        game_fsm.d=GameStates.IS_THIS_THE_KILLBUTTON
                    }else{
                        //Else we do nothing
                        game_fsm.d=GameStates.IDLE
                    }
                //---------END OF BUTTON INPUT CHECKING--------------------------------
                    
                              
                //ENDING
                GameStates.END:
                    alu_out_sel=b01
                    game_fsm.d=GameStates.END
                
                
                
                //IDLE
                GameStates.IDLE:
                    if(decrease_timer){
                        game_fsm.d=GameStates.CHECK_TIMER_EQ0
                        }
                    else if(interval1){
                        game_fsm.d=GameStates.INTERVAL_CHECK_LEVEL1
                    }
                    else if(interval2){
                        game_fsm.d=GameStates.INTERVAL_CHECK_LEVEL2
                    }
                    else if(interval3){
                        game_fsm.d=GameStates.INTERVAL_CHECK_LEVEL3
                    }
                    else{
                        game_fsm.d=GameStates.IDLE
                    }
            }
        }
    }
}