module game_cu (
    input clk,
    input rst,
    input gameinterval,
    input decrease_timer,
    input regfile_rd2[32], //i do actually need this
    
    input button1,
    input button2,
    input button3,
    input button4,
    input button5,
    input button6,
    input buttonstart,
    
    output alufn[6],
    output asel[2],
    output bsel[4],
    output alu_out_sel[3],
    output regfile_wa[5],
    output regfile_ra1[5],
    output regfile_ra2[5],
    output regfile_we,
    output debug[4]
) {
    enum GameStates{
        START_SET_TIMER,
        START_COOL_TIMER,
        WAIT_TO_START,
        
        IDLE,
        
        CHECK_TIMER_EQ0,
        BRANCH_TIMER_EQ0,
        DECREASE_TIMER,
        DECREASE_COOL_TIMER,
        
        MODE_CHECK_EQ1,
        BRANCH_MODE_CHECK_EQ1,
        
        MODE_CHECK_EQ0,
        BRANCH_MODE_CHECK_EQ0,
        
        COOLDOWN_EQ0,
        BRANCH_COOLDOWN_EQ0,
        DECREASE_COOLDOWN,
        RESET_MODE_1,
        
        AWAKE_EQ0,
        BRANCH_AWAKE_EQ0,
        DECREASE_AWAKE,
        RESET_ACTIVE_BUTTON_0,
        RESET_ACTIVE_TYPE_0,
        RESET_SET_LED_OUT_0,
        RESET_MODE_0,
        
        GENERATE_BUTTONMAP, 
        SET_ACTIVE_BUTTON, 
        SET_ACTIVE_TYPE, 
        SET_AWAKE, 
        SET_COOLDOWN,
        SET_LED_OUT_1,
        RESET_MODE_2,
        
        B1_IS_ACTIVE_BUTTON,
        B2_IS_ACTIVE_BUTTON,
        B3_IS_ACTIVE_BUTTON,
        B4_IS_ACTIVE_BUTTON,
        B5_IS_ACTIVE_BUTTON,        
        B6_IS_ACTIVE_BUTTON,
        BRANCH_IS_ACTIVE_BUTTON,
        
        IS_THIS_THE_KILLBUTTON,
        BRANCH_IS_THIS_THE_KILLBUTTON,
        
        TEMPSCORE_TABULATE,
        IS_TEMPSCORE_MT99,
        BRANCH_IS_TEMPSCORE_MT99,
        ADD_SCORE,
        MULTIPLY_POINTS_BY_100,
        ADD_COOL_SCORE,
        
        SCORE_MTEQ5,
        BRANCH_SCORE_MTEQ5,
        SET_LVL_2,
        SCORE_MTEQ20,
        BRANCH_SCORE_MTEQ20,
        SET_LVL_3,        
        RESET_AWAKE_0,
        
        WIN,
        LOSE,
        TIMEOUT,
        END
    }
    dff game_fsm[$width(GameStates)](#INIT(GameStates.START_SET_TIMER), .clk(clk), .rst(rst))
    dff delay_fsm[6](.clk(clk), #INIT(0))
    sig advance 
    always {
        alufn=0
        asel=0
        bsel=0
        alu_out_sel=0
        regfile_wa=d9 //just in case we just send them somehwere
        regfile_ra1=0
        regfile_ra2=0
        regfile_we=0
        debug=0
        
        delay_fsm.d = delay_fsm.q + 1
        advance = &delay_fsm.q
        
        game_fsm.d=game_fsm.q
        if (rst){
            game_fsm.d=GameStates.START_SET_TIMER
        }
        else{
            case(game_fsm.q){
                //TIMER STUFF
                GameStates.START_SET_TIMER:
                    alufn=b000000 //ADD
                    regfile_ra1=d0 //timer
                    asel=b00 //Ra
                    bsel=b0110 //90
                    regfile_wa=d0 //timer
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.START_COOL_TIMER
                        
                    }
                GameStates.START_COOL_TIMER:
                    alufn=b000000 //ADD
                    regfile_ra1=d12 //cooltimer
                    asel=b00 //Ra
                    bsel=b0110 //90
                    regfile_wa=d12 //cooltimer
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.WAIT_TO_START
                        
                    }
                GameStates.WAIT_TO_START:
                    if(buttonstart){
                        game_fsm.d=GameStates.IDLE
                    }
                    else{
                        game_fsm.d=GameStates.WAIT_TO_START
                    }
                GameStates.CHECK_TIMER_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d0 //timer
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb
                    regfile_wa=d9 //Temp for comparisons
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_TIMER_EQ0
                        
                    }
                GameStates.BRANCH_TIMER_EQ0:
                    regfile_ra2=d9 //Temp for comparisons
                    if (regfile_rd2[0]){
                        game_fsm.d=GameStates.TIMEOUT
                    }
                    else{
                        game_fsm.d=GameStates.DECREASE_TIMER
                    }
                GameStates.DECREASE_TIMER:
                    alufn=b000001 //SUB
                    regfile_ra1=d0 //timer
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_wa=d0 //timer
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.DECREASE_COOL_TIMER
                        
                    }
                GameStates.DECREASE_COOL_TIMER:
                    alufn=b000001 //SUB
                    regfile_ra1=d12 //cooltimer
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_wa=d12 //cooltimer
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IDLE
                        
                    }
                //END OF TIMING DECREMENTERS----------------------------------------
                
                
                //MODE CHECKING FOR 1 (CAN WE PROG WITH BUTTON GEN)
                GameStates.MODE_CHECK_EQ1:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d3 //mode
                    asel=b00 //Ra
                    bsel=b0001 //1 (Mode 1 is ready)
                    regfile_wa=d9 //Temp for Cmp
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_MODE_CHECK_EQ1
                        
                    }
                GameStates.BRANCH_MODE_CHECK_EQ1:
                    //TEST
                    //alufn=b000000//add
                    //regfile_ra1=d31 //0 reg
                    //asel=b00//Ra
                    //bsel=b0100//4
                    ////regfile_wa=d11//setled
                    //ENDTEST                    
                    regfile_ra2=d9 //Temp for Cmp
                    if(regfile_rd2[0]){
                        //if mode 1, we are ready to generate

                            game_fsm.d=GameStates.GENERATE_BUTTONMAP
                            

                    }else{
                        //if mode is not 1, then it is 0/2
                        //go to check mode 0
                        game_fsm.d=GameStates.MODE_CHECK_EQ0
                    }
                //END OF MODE CHECK 1----------------------------------------  
                
                
                //MODE CHECK 0 (ARE WE ACTIVE/COOLDOWN?)
                GameStates.MODE_CHECK_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d3 //mode
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d9 //Temp for Cmp
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_MODE_CHECK_EQ0 
                        
                    }
                GameStates.BRANCH_MODE_CHECK_EQ0:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //if mode is 0, we are in cooldown mode
                        //check cooldown
                        game_fsm.d=GameStates.COOLDOWN_EQ0
                    }else{
                        //we are in button active mode
                        //check awake
                        game_fsm.d=GameStates.AWAKE_EQ0
                    }
                //---------END OF MODECHECK0---------------------------------                
                
                
                //COOLDOWN DECREMENTERS AND STUFF
                GameStates.COOLDOWN_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d8 //Cooldown
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d9 //Temp for Cmp
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_COOLDOWN_EQ0
                        
                    }
                GameStates.BRANCH_COOLDOWN_EQ0:
                    //TEST
                    //alufn=b000000//add
                    //regfile_ra1=d31 //0 reg
                    //asel=b00//Ra
                    //bsel=b0011//3
                    ////regfile_wa=d11//setled
                    //ENDTEST
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If cooldown is 0. We are ready to generate buttons again
                        //Reset mode to 1
                        if(advance){
                            regfile_we=1
                            game_fsm.d=GameStates.RESET_MODE_1
                            
                        }
                    }else{
                        //otherwise, we need to decrease the cooldown this interval
                        //go to decrease cooldown
                        game_fsm.d=GameStates.DECREASE_COOLDOWN
                    }
                GameStates.DECREASE_COOLDOWN:
                    alufn=b000001//SUB
                    regfile_ra1=d8 //Cooldown
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_wa=d8 //Cooldown
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IDLE
                        
                    }
                GameStates.RESET_MODE_1:
                    //we add 0 to 1 and write it to mode
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel= b0001 //1
                    regfile_wa=d3 //mode
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IDLE
                        
                    }
                //---------END OF COOLDOWNSTUFF---------------------------------                                
                
                
                //AWAKESTUFF
                GameStates.AWAKE_EQ0:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d5 //Awake
                    regfile_ra2=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d9 //Temp for Cmp
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_AWAKE_EQ0
                        
                    }
                GameStates.BRANCH_AWAKE_EQ0:
                    //TEST
                    //alufn=b000000//add
                    //regfile_ra1=d31 //0 reg
                    //asel=b00//Ra
                    //bsel=b0101//20
                    ////regfile_wa=d11//setled
                    //ENDTEST                    
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If our awake is 0, our buttons need to turn off now
                        //reset mode to 0
                            game_fsm.d=GameStates.RESET_ACTIVE_BUTTON_0
                    }else{
                        //If our awake is not 0, decrease
                        game_fsm.d=GameStates.DECREASE_AWAKE
                    }
                GameStates.DECREASE_AWAKE:
                    alufn=b000001 //SUB
                    regfile_ra1=d5 //awake
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_wa=d5 //awake
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IDLE  
                        
                    }
                GameStates.RESET_MODE_0:
                    alufn=b000001 //SUB
                    asel=b10 //20
                    bsel=b0101 //20
                    regfile_wa=d3 //mode
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IDLE
                        
                    }
                //---------END OF AWAKESTUFF---------------------------------
                
                
                //RESET BUTTONS
                GameStates.RESET_ACTIVE_BUTTON_0:
                    alufn=b000001 //SUB
                    asel=b10 //20
                    bsel=b0101 //20
                    regfile_wa=d6 //activebutton
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.RESET_ACTIVE_TYPE_0
                        
                    }
                GameStates.RESET_ACTIVE_TYPE_0:
                    alufn=b000001 //SUB
                    asel=b10 //20
                    bsel=b0101 //20
                    regfile_wa=d7 //activetype
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.RESET_SET_LED_OUT_0
                        
                    }
                GameStates.RESET_SET_LED_OUT_0:
                    alufn=b000001 //SUB
                    asel=b10 //20
                    bsel=b0101 //20
                    regfile_wa=d11 //setled
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.RESET_MODE_0
                        
                    }
                //---------END OF BUTTON RESETS--------------------------------                
                
                
                //BUTTON GENERATION STUFF
                GameStates.GENERATE_BUTTONMAP:
                    regfile_wa=d2 //buttonmap
                    alu_out_sel=b100
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SET_ACTIVE_BUTTON
                        
                    }
                GameStates.SET_ACTIVE_BUTTON:
                    alufn=b111000 //activebutton function
                    regfile_ra1=d2//buttonmap
                    regfile_ra2=d4 //level
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d6//activebutton
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SET_ACTIVE_TYPE 
                        
                    }
                GameStates.SET_ACTIVE_TYPE:
                    alufn=b111001 //activetype function
                    regfile_ra1=d2 //buttonmap
                    regfile_ra2=d4 //level
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d7//activetype
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SET_AWAKE   
                        
                    }
                GameStates.SET_AWAKE:
                    alufn=b111010 //awake function
                    regfile_ra1=d2 //buttonmap
                    regfile_ra2=d4 //level
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d5 //awake
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SET_COOLDOWN
                        
                    }
                GameStates.SET_COOLDOWN:
                    alufn=b111011 //cooldown function
                    regfile_ra1=d2 //buttonmap
                    regfile_ra2=d4 //level
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d8 //cooldown
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SET_LED_OUT_1
                        
                    }
                GameStates.SET_LED_OUT_1:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0001 //1
                    regfile_wa=d11 //setled
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.RESET_MODE_2
                        
                    }
                GameStates.RESET_MODE_2:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0010 //2
                    regfile_wa=d3 //mode
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IDLE
                        
                    }
                //---------END OF BUTTON GENERATION--------------------------------
                
                
                //BUTTON INPUT CHECKING
                GameStates.B1_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6//activebutton
                    asel=b00 //Ra
                    bsel=b0001 //1 for button 1
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                        
                    }
                GameStates.B2_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0010 //2 for button 2
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                        
                    }
                GameStates.B3_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b0100 //4 for button 3
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                        
                    }
                GameStates.B4_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6 //activebutton
                    asel=b00 //Ra
                    bsel=b1000//8 for button 4
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                        
                    }
                GameStates.B5_IS_ACTIVE_BUTTON:
                    alufn=b110011//CMPEQ
                    regfile_ra1=d6
                    asel=b00
                    bsel=b1001 //16 for button 5
                    regfile_wa=d9 //TEmp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                        
                    }
                GameStates.B6_IS_ACTIVE_BUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d6
                    asel=b00
                    bsel=b1010 //32 for button 6
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_ACTIVE_BUTTON
                        
                    }
                GameStates.BRANCH_IS_ACTIVE_BUTTON:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If this button really is the button, see if we die
                        game_fsm.d=GameStates.IS_THIS_THE_KILLBUTTON
                    }else{
                        //Else we do nothing
                        game_fsm.d=GameStates.IDLE
                    }    
                //---------END OF BUTTON INPUT CHECKING--------------------------------                            
                
                
                //HAVE WE PRESSED KILLBUTTON
                GameStates.IS_THIS_THE_KILLBUTTON:
                    alufn=b110011 //CMPEQ
                    regfile_ra1=d7 //activetype
                    asel=b00//Ra
                    bsel=b1000 //8 for kill button
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_THIS_THE_KILLBUTTON
                        
                    }
                GameStates.BRANCH_IS_THIS_THE_KILLBUTTON:
                    regfile_ra2=d9                 
                    if(regfile_rd2[0]){
                        //If this is the killbutton
                        game_fsm.d=GameStates.LOSE
                    }else{                       
                        //Else we move on to tabulate the tempscore
                        game_fsm.d=GameStates.TEMPSCORE_TABULATE
                    }
                //---------END OF KILL BUTTON CHECK--------------------------------
                
                
                //SCORE TABULATION
                GameStates.TEMPSCORE_TABULATE:
                    alufn=b000000 //ADD
                    regfile_ra1=d1 //score
                    regfile_ra2=d7 //activetype
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d10 //Temp for Add
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.IS_TEMPSCORE_MT99
                        
                    }
                GameStates.IS_TEMPSCORE_MT99:
                    alufn=b110101//CMPLT 99<tempscore
                    regfile_ra2=d10 //Temp for Add
                    asel=b11 //99
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d9 //Temp for Cmp
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_IS_TEMPSCORE_MT99
                        
                    }
                GameStates.BRANCH_IS_TEMPSCORE_MT99:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If the tempscore exceeds 99
                        game_fsm.d=GameStates.WIN
                    }else{
                        //Else we move on to add the score for real
                        game_fsm.d=GameStates.ADD_SCORE
                    }
                GameStates.ADD_SCORE:
                    alufn=b000000 //ADD
                    regfile_ra1=d1 //score
                    regfile_ra2=d7 //active type (type is rep by the score of button)
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d1
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.MULTIPLY_POINTS_BY_100 
                        
                    }
                //MULTIPLY_POINTS_BY_100,
                //ADD_COOL_SCORE,
                GameStates.MULTIPLY_POINTS_BY_100:
                    //for the cooltimer
                    alufn=b000010 //Multiply
                    regfile_ra1=d7//active type (type rep score)
                    asel=b00 //Ra
                    bsel=b1011 //100
                    regfile_wa=d10 //Temp for Add
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.ADD_COOL_SCORE
                        
                    }
                GameStates.ADD_COOL_SCORE:
                    alufn=b000000//ADD
                    regfile_ra1=d12 //cooltimer
                    regfile_ra2=d10 //Temp for Add
                    asel=b00 //Ra
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d12
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SCORE_MTEQ5
                        
                    }
                //---------END OF SCORE TABULATION--------------------------------
                
                
                //LEVEL INCREMENT
                GameStates.SCORE_MTEQ5:
                    alufn=b110111 //CMPLE 5<=score
                    regfile_ra2=d1 //score
                    asel=b01 //5
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d9 //Temp for Cmp
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_SCORE_MTEQ5
                        
                    }
                GameStates.BRANCH_SCORE_MTEQ5:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If it is really more than 5 we set level to 2
                        game_fsm.d=GameStates.SET_LVL_2
                    }else{
                        //Else we move on to reset the awake timer
                        game_fsm.d=GameStates.RESET_AWAKE_0
                    }
                GameStates.SET_LVL_2:
                    alufn=b000000 //ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0001 //1 (1 for level 1)
                    regfile_wa=d4 //levelcounter
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.SCORE_MTEQ20
                        
                    }
                GameStates.SCORE_MTEQ20:
                    alufn=b110111 //CMPLE 20<=score
                    regfile_ra2=d1 //score
                    asel=b10//20
                    bsel=b0000 //Rb/Rc
                    regfile_wa=d9 //Temp for CMP
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.BRANCH_SCORE_MTEQ20
                        
                    }
                GameStates.BRANCH_SCORE_MTEQ20:
                    regfile_ra2=d9
                    if(regfile_rd2[0]){
                        //If it is really more than 20 we set to level 3
                        game_fsm.d=GameStates.SET_LVL_3
                    }else{
                        //Else we move on to reset the awake timer
                        game_fsm.d=GameStates.RESET_AWAKE_0
                    }
                GameStates.SET_LVL_3:
                    alufn=b000000//ADD
                    regfile_ra1=d31 //0 register
                    asel=b00 //Ra
                    bsel=b0011//3 (3 for level 3)
                    regfile_wa=d4//level counter
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.RESET_AWAKE_0
                        
                    }
                GameStates.RESET_AWAKE_0:
                    alufn=b000001 //SUB
                    asel=b10 //20
                    bsel=b0101 //20
                    regfile_wa=d5 //awake
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.RESET_ACTIVE_BUTTON_0
                        
                    }
                //this loops back to standard buttontype, button, mode reset protocol
                //---------END OF LEVEL INCREMENT--------------------------------                
                
                
                
                //ENDING
                GameStates.WIN:
                    //FLASHBANG
                    alu_out_sel=b001
                    regfile_wa=d6
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.END
                    }
                GameStates.LOSE:
                    //L
                    alu_out_sel=b010
                    regfile_wa=d6
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.END
                    }
                GameStates.TIMEOUT:
                    //zigzag
                    alu_out_sel=b011
                    regfile_wa=d6
                    if(advance){
                        regfile_we=1
                        game_fsm.d=GameStates.END
                    }
                GameStates.END:
                    game_fsm.d=GameStates.END
                
                
                
                //IDLE
                GameStates.IDLE:
                    if(decrease_timer){
                        game_fsm.d=GameStates.CHECK_TIMER_EQ0
                    }
                    else if(gameinterval){
                        game_fsm.d=GameStates.MODE_CHECK_EQ1
                    }
                    else if(button1&&~button2&&~button3&&~button4&&~button5&&~button6){
                        game_fsm.d=GameStates.B1_IS_ACTIVE_BUTTON
                    }
                    else if(~button1&&button2&&~button3&&~button4&&~button5&&~button6){
                        game_fsm.d=GameStates.B2_IS_ACTIVE_BUTTON
                    }
                    else if(~button1&&~button2&&button3&&~button4&&~button5&&~button6){
                        game_fsm.d=GameStates.B3_IS_ACTIVE_BUTTON
                    }
                    else if(~button1&&~button2&&~button3&&button4&&~button5&&~button6){
                        game_fsm.d=GameStates.B4_IS_ACTIVE_BUTTON
                    }
                    else if(~button1&&~button2&&~button3&&~button4&&button5&&~button6){
                        game_fsm.d=GameStates.B5_IS_ACTIVE_BUTTON
                    }
                    else if(~button1&&~button2&&~button3&&~button4&&~button5&&button6){
                        game_fsm.d=GameStates.B6_IS_ACTIVE_BUTTON
                    }
                    else{
                        game_fsm.d=GameStates.IDLE
                    }
            }
        }
    }
}