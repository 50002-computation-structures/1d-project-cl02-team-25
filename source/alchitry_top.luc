module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLK_FREQ = $is_sim() ? 1000 : 100000000 // put 1000 for sim, 100M for hardware 
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 3 for sim, 16 for hardware
    const SLOW_CLOCK_DIV = $is_sim() ? 9 : 26 // put 9 for sim, 26 for hardware 
    const FAST_CLOCK_DIV = $is_sim() ? 7 : 21 // put 7 for sim, 21 for hardware 
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        edge_detector edge_det_b1 (#RISE(1), #FALL(0))
        edge_detector edge_det_b2 (#RISE(1), #FALL(0))
        edge_detector edge_det_b3 (#RISE(1), #FALL(0))
        edge_detector edge_det_b4 (#RISE(1), #FALL(0))
        edge_detector edge_det_start (#RISE(1), #FALL(0))
        
        button_conditioner btn_cond_b1 (#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_b2 (#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_b3 (#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_b4 (#CLK_FREQ(CLK_FREQ))
        button_conditioner btn_cond_start (#CLK_FREQ(CLK_FREQ))
        
        .rst(rst){
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            game_datapath game_datapath(#SLOW_CLOCK_DIV(SLOW_CLOCK_DIV), #FAST_CLOCK_DIV(FAST_CLOCK_DIV))
        }
    }
    
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    always {
        reset_cond.in = ~rst_n // input raw inverted reset signal
        rst = reset_cond.out   // conditioned reset
        
        usb_tx = usb_rx        // loop serial port
        
        led = 8h00             // turn LEDs off
        
        io_led = 3x{{8h00}}    // turn LEDs off
        io_segment = 8hff          // turn segments off
        io_select = 4hf           // select no digits
        
        btn_cond_b1.in=io_button[0]
        btn_cond_b2.in=io_button[2]
        btn_cond_b3.in=io_button[3]
        btn_cond_b4.in=io_button[4]
        btn_cond_start.in=io_button[1]
        
        edge_det_b1.in=btn_cond_b1.out
        edge_det_b2.in=btn_cond_b2.out
        edge_det_b3.in=btn_cond_b3.out
        edge_det_b4.in=btn_cond_b4.out
        edge_det_start.in=btn_cond_start.out
        
        game_datapath.button1=edge_det_b1.out
        game_datapath.button2=edge_det_b2.out
        game_datapath.button3=edge_det_b3.out
        game_datapath.button4=edge_det_b4.out
        game_datapath.button5=io_dip[0][0] //this is nonsense ignore
        game_datapath.button6=io_dip[0][1]
        game_datapath.buttonstart=edge_det_start.out
        
        decimal_renderer.value=game_datapath.timerout
        seg.values = decimal_renderer.digits
        io_segment=~seg.seg
        io_select=~seg.sel
        // to test ALU 
        
        io_led[0]=game_datapath.activebuttonout
        io_led[1]=game_datapath.activetypeout
        io_led[2]=game_datapath.scoreout
        led[2]=game_datapath.slow_clock_out
        led[1:0]=game_datapath.levelcounterout +1
        //TO ADD SCORE LINKAGE
    }
}