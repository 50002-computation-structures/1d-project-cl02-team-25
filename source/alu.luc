module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output z,
    output v,
    output n
) {
    const SIZE = 32
    adder adder(#SIZE(32))
    compare compare
    boolean boolean(#SIZE(32))
    shifter shifter
    multiplier multiplier
    buttonmap_button activebutton
    buttonmap_type activetype
    buttonmap_awake awake
    buttonmap_cooldown cooldown
    sig add_ctr[6]


    
    
    always {
        adder.a = a
        adder.b = b
        adder.alufn_signal = alufn
        
        z = adder.z;
        v = adder.v;
        n = adder.n;

        compare.z = adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn
    
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn
        
        shifter.a = a
        shifter.b = b[4:0]
        shifter.alufn = alufn
        
        multiplier.a = a
        multiplier.b = b
      
        
        activebutton.a=a
        activebutton.b=b
        
        activetype.a=a
        activetype.b=b
        
        awake.a=a
        awake.b=b
        
        cooldown.a=a
        cooldown.b=b
           
        case(alufn){
            b000000:out=adder.out
            b000001:out=adder.out
            b000010:out=multiplier.out
            b011000:out=boolean.out
            b011110:out=boolean.out
            b010110:out=boolean.out
            b011010:out=boolean.out
            b100000:out=shifter.shift
            b100001:out=shifter.shift
            b100011:out=shifter.shift
            b110011:out=compare.cmp
            b110101:out=compare.cmp
            b110111:out=compare.cmp
            
            b111000:out=activebutton.out
            b111001:out=activetype.out
            b111010:out=awake.out
            b111011:out=cooldown.out
            default:out=0
            
                
        }
    }
}