/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam SLOW_CLOCK_DIV = 5'h1a;
    localparam LVL1_CLOCK_DIV = 5'h19;
    localparam LVL2_CLOCK_DIV = 5'h18;
    localparam LVL3_CLOCK_DIV = 5'h17;
    localparam _MP_STAGES_348500737 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_348500737)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_RISE_377967947 = 1'h1;
    localparam _MP_FALL_377967947 = 1'h0;
    logic M_edge_det_b1_in;
    logic M_edge_det_b1_out;
    
    edge_detector #(
        .RISE(_MP_RISE_377967947),
        .FALL(_MP_FALL_377967947)
    ) edge_det_b1 (
        .clk(clk),
        .in(M_edge_det_b1_in),
        .out(M_edge_det_b1_out)
    );
    
    
    localparam _MP_RISE_1933444159 = 1'h1;
    localparam _MP_FALL_1933444159 = 1'h0;
    logic M_edge_det_b2_in;
    logic M_edge_det_b2_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1933444159),
        .FALL(_MP_FALL_1933444159)
    ) edge_det_b2 (
        .clk(clk),
        .in(M_edge_det_b2_in),
        .out(M_edge_det_b2_out)
    );
    
    
    localparam _MP_RISE_1775775786 = 1'h1;
    localparam _MP_FALL_1775775786 = 1'h0;
    logic M_edge_det_b3_in;
    logic M_edge_det_b3_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1775775786),
        .FALL(_MP_FALL_1775775786)
    ) edge_det_b3 (
        .clk(clk),
        .in(M_edge_det_b3_in),
        .out(M_edge_det_b3_out)
    );
    
    
    localparam _MP_RISE_510404990 = 1'h1;
    localparam _MP_FALL_510404990 = 1'h0;
    logic M_edge_det_b4_in;
    logic M_edge_det_b4_out;
    
    edge_detector #(
        .RISE(_MP_RISE_510404990),
        .FALL(_MP_FALL_510404990)
    ) edge_det_b4 (
        .clk(clk),
        .in(M_edge_det_b4_in),
        .out(M_edge_det_b4_out)
    );
    
    
    localparam _MP_RISE_18597067 = 1'h1;
    localparam _MP_FALL_18597067 = 1'h0;
    logic M_edge_det_start_in;
    logic M_edge_det_start_out;
    
    edge_detector #(
        .RISE(_MP_RISE_18597067),
        .FALL(_MP_FALL_18597067)
    ) edge_det_start (
        .clk(clk),
        .in(M_edge_det_start_in),
        .out(M_edge_det_start_out)
    );
    
    
    localparam _MP_CLK_FREQ_74021997 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_74021997 = 5'h14;
    localparam _MP_NUM_SYNC_74021997 = 2'h2;
    logic M_btn_cond_b1_in;
    logic M_btn_cond_b1_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_74021997),
        .MIN_DELAY(_MP_MIN_DELAY_74021997),
        .NUM_SYNC(_MP_NUM_SYNC_74021997)
    ) btn_cond_b1 (
        .clk(clk),
        .in(M_btn_cond_b1_in),
        .out(M_btn_cond_b1_out)
    );
    
    
    localparam _MP_CLK_FREQ_1752766573 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1752766573 = 5'h14;
    localparam _MP_NUM_SYNC_1752766573 = 2'h2;
    logic M_btn_cond_b2_in;
    logic M_btn_cond_b2_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1752766573),
        .MIN_DELAY(_MP_MIN_DELAY_1752766573),
        .NUM_SYNC(_MP_NUM_SYNC_1752766573)
    ) btn_cond_b2 (
        .clk(clk),
        .in(M_btn_cond_b2_in),
        .out(M_btn_cond_b2_out)
    );
    
    
    localparam _MP_CLK_FREQ_1152596233 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1152596233 = 5'h14;
    localparam _MP_NUM_SYNC_1152596233 = 2'h2;
    logic M_btn_cond_b3_in;
    logic M_btn_cond_b3_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1152596233),
        .MIN_DELAY(_MP_MIN_DELAY_1152596233),
        .NUM_SYNC(_MP_NUM_SYNC_1152596233)
    ) btn_cond_b3 (
        .clk(clk),
        .in(M_btn_cond_b3_in),
        .out(M_btn_cond_b3_out)
    );
    
    
    localparam _MP_CLK_FREQ_517432157 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_517432157 = 5'h14;
    localparam _MP_NUM_SYNC_517432157 = 2'h2;
    logic M_btn_cond_b4_in;
    logic M_btn_cond_b4_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_517432157),
        .MIN_DELAY(_MP_MIN_DELAY_517432157),
        .NUM_SYNC(_MP_NUM_SYNC_517432157)
    ) btn_cond_b4 (
        .clk(clk),
        .in(M_btn_cond_b4_in),
        .out(M_btn_cond_b4_out)
    );
    
    
    localparam _MP_CLK_FREQ_667172077 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_667172077 = 5'h14;
    localparam _MP_NUM_SYNC_667172077 = 2'h2;
    logic M_btn_cond_start_in;
    logic M_btn_cond_start_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_667172077),
        .MIN_DELAY(_MP_MIN_DELAY_667172077),
        .NUM_SYNC(_MP_NUM_SYNC_667172077)
    ) btn_cond_start (
        .clk(clk),
        .in(M_btn_cond_start_in),
        .out(M_btn_cond_start_out)
    );
    
    
    localparam _MP_DIGITS_123662856 = 3'h4;
    localparam _MP_DIV_123662856 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_123662856),
        .DIV(_MP_DIV_123662856)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_SLOW_CLOCK_DIV_2033573209 = 5'h1a;
    localparam _MP_LVL1_CLOCK_DIV_2033573209 = 5'h19;
    localparam _MP_LVL2_CLOCK_DIV_2033573209 = 5'h18;
    localparam _MP_LVL3_CLOCK_DIV_2033573209 = 5'h17;
    logic M_game_datapath_button1;
    logic M_game_datapath_button2;
    logic M_game_datapath_button3;
    logic M_game_datapath_button4;
    logic M_game_datapath_button5;
    logic M_game_datapath_button6;
    logic M_game_datapath_buttonstart;
    logic [31:0] M_game_datapath_timerout;
    logic [31:0] M_game_datapath_scoreout;
    logic [31:0] M_game_datapath_levelcounterout;
    logic [31:0] M_game_datapath_awakeout;
    logic [31:0] M_game_datapath_activebuttonout;
    logic [31:0] M_game_datapath_activetypeout;
    logic [31:0] M_game_datapath_cooldownout;
    logic [31:0] M_game_datapath_interval1blinker;
    logic [31:0] M_game_datapath_interval2blinker;
    logic [31:0] M_game_datapath_interval3blinker;
    logic M_game_datapath_slow_clock_out;
    logic [3:0] M_game_datapath_debug_general;
    
    game_datapath #(
        .SLOW_CLOCK_DIV(_MP_SLOW_CLOCK_DIV_2033573209),
        .LVL1_CLOCK_DIV(_MP_LVL1_CLOCK_DIV_2033573209),
        .LVL2_CLOCK_DIV(_MP_LVL2_CLOCK_DIV_2033573209),
        .LVL3_CLOCK_DIV(_MP_LVL3_CLOCK_DIV_2033573209)
    ) game_datapath (
        .clk(clk),
        .rst(rst),
        .button1(M_game_datapath_button1),
        .button2(M_game_datapath_button2),
        .button3(M_game_datapath_button3),
        .button4(M_game_datapath_button4),
        .button5(M_game_datapath_button5),
        .button6(M_game_datapath_button6),
        .buttonstart(M_game_datapath_buttonstart),
        .timerout(M_game_datapath_timerout),
        .scoreout(M_game_datapath_scoreout),
        .levelcounterout(M_game_datapath_levelcounterout),
        .awakeout(M_game_datapath_awakeout),
        .activebuttonout(M_game_datapath_activebuttonout),
        .activetypeout(M_game_datapath_activetypeout),
        .cooldownout(M_game_datapath_cooldownout),
        .interval1blinker(M_game_datapath_interval1blinker),
        .interval2blinker(M_game_datapath_interval2blinker),
        .interval3blinker(M_game_datapath_interval3blinker),
        .slow_clock_out(M_game_datapath_slow_clock_out),
        .debug_general(M_game_datapath_debug_general)
    );
    
    
    localparam _MP_DIGITS_1860709501 = 3'h4;
    localparam _MP_LEADING_ZEROS_1860709501 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1860709501),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1860709501)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        M_btn_cond_b1_in = io_button[1'h0];
        M_btn_cond_b2_in = io_button[2'h2];
        M_btn_cond_b3_in = io_button[2'h3];
        M_btn_cond_b4_in = io_button[3'h4];
        M_btn_cond_start_in = io_button[1'h1];
        M_edge_det_b1_in = M_btn_cond_b1_out;
        M_edge_det_b2_in = M_btn_cond_b2_out;
        M_edge_det_b3_in = M_btn_cond_b3_out;
        M_edge_det_b4_in = M_btn_cond_b4_out;
        M_edge_det_start_in = M_btn_cond_start_out;
        M_game_datapath_button1 = M_edge_det_b1_out;
        M_game_datapath_button2 = M_edge_det_b2_out;
        M_game_datapath_button3 = M_edge_det_b3_out;
        M_game_datapath_button4 = M_edge_det_b4_out;
        M_game_datapath_button5 = io_dip[1'h0][1'h0];
        M_game_datapath_button6 = io_dip[1'h0][1'h1];
        M_game_datapath_buttonstart = M_edge_det_start_out;
        M_decimal_renderer_value = M_game_datapath_timerout;
        M_seg_values = M_decimal_renderer_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
        io_led[1'h0] = M_game_datapath_activebuttonout;
        io_led[1'h1] = M_game_datapath_activetypeout;
        io_led[2'h2] = M_game_datapath_scoreout;
        led[2'h3] = M_game_datapath_interval1blinker;
        led[3'h4] = M_game_datapath_interval2blinker;
        led[3'h5] = M_game_datapath_interval3blinker;
        led[2'h2] = M_game_datapath_slow_clock_out;
        led[1'h1:1'h0] = M_game_datapath_levelcounterout + 1'h1;
    end
    
    
endmodule