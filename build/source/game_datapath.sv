/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_datapath #(
        parameter SLOW_CLOCK_DIV = 5'h1a,
        parameter INTERVAL_CLOCK_DIV = 5'h18,
        parameter FAST_CLOCK_DIV = 5'h14
    ) (
        input wire button1,
        input wire button2,
        input wire button3,
        input wire button4,
        input wire button5,
        input wire button6,
        input wire buttonstart,
        input wire clk,
        input wire rst,
        output reg [31:0] timerout,
        output reg [31:0] scoreout,
        output reg [31:0] buttonmapout,
        output reg [31:0] modeout,
        output reg [31:0] levelcounterout,
        output reg [31:0] awakeout,
        output reg [31:0] activebuttonout,
        output reg [31:0] activetypeout,
        output reg [31:0] cooldownout,
        output reg [31:0] setledout,
        output reg [31:0] cooltimerout,
        output reg gameintervalblinker,
        output reg slow_clock_out,
        output reg [3:0] debug_general
    );
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    logic [31:0] M_game_alu_a;
    logic [31:0] M_game_alu_b;
    logic [5:0] M_game_alu_alufn;
    logic [31:0] M_game_alu_out;
    logic M_game_alu_z;
    logic M_game_alu_v;
    logic M_game_alu_n;
    
    alu game_alu (
        .a(M_game_alu_a),
        .b(M_game_alu_b),
        .alufn(M_game_alu_alufn),
        .out(M_game_alu_out),
        .z(M_game_alu_z),
        .v(M_game_alu_v),
        .n(M_game_alu_n)
    );
    
    
    localparam _MP_SEED_658006777 = 30'h286b4b9c;
    localparam _MP_FAST_CLOCK_DIV_658006777 = FAST_CLOCK_DIV;
    logic [31:0] M_gen_rn_out;
    
    generate_rn #(
        .SEED(_MP_SEED_658006777),
        .FAST_CLOCK_DIV(_MP_FAST_CLOCK_DIV_658006777)
    ) gen_rn (
        .rst(rst),
        .clk(clk),
        .out(M_gen_rn_out)
    );
    
    
    localparam _MP_SIZE_1777810126 = 1'h1;
    localparam _MP_DIV_1777810126 = SLOW_CLOCK_DIV;
    localparam _MP_TOP_1777810126 = 1'h0;
    localparam _MP_UP_1777810126 = 1'h1;
    logic [0:0] M_game_timer_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_1777810126),
        .DIV(_MP_DIV_1777810126),
        .TOP(_MP_TOP_1777810126),
        .UP(_MP_UP_1777810126)
    ) game_timer_clock (
        .rst(rst),
        .clk(clk),
        .value(M_game_timer_clock_value)
    );
    
    
    localparam _MP_SIZE_301700829 = 1'h1;
    localparam _MP_DIV_301700829 = INTERVAL_CLOCK_DIV;
    localparam _MP_TOP_301700829 = 1'h0;
    localparam _MP_UP_301700829 = 1'h1;
    logic [0:0] M_game_interval_value;
    
    counter #(
        .SIZE(_MP_SIZE_301700829),
        .DIV(_MP_DIV_301700829),
        .TOP(_MP_TOP_301700829),
        .UP(_MP_UP_301700829)
    ) game_interval (
        .rst(rst),
        .clk(clk),
        .value(M_game_interval_value)
    );
    
    
    localparam _MP_RISE_2097674434 = 1'h1;
    localparam _MP_FALL_2097674434 = 1'h0;
    logic M_edge_detector_game_timer_out;
    
    edge_detector #(
        .RISE(_MP_RISE_2097674434),
        .FALL(_MP_FALL_2097674434)
    ) edge_detector_game_timer (
        .in(M_game_timer_clock_value),
        .clk(clk),
        .out(M_edge_detector_game_timer_out)
    );
    
    
    localparam _MP_RISE_1724719333 = 1'h1;
    localparam _MP_FALL_1724719333 = 1'h0;
    logic M_edge_detector_game_interval_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1724719333),
        .FALL(_MP_FALL_1724719333)
    ) edge_detector_game_interval (
        .in(M_game_interval_value),
        .clk(clk),
        .out(M_edge_detector_game_interval_out)
    );
    
    
    logic [31:0] M_game_cu_regfile_rd2;
    logic [5:0] M_game_cu_alufn;
    logic [1:0] M_game_cu_asel;
    logic [3:0] M_game_cu_bsel;
    logic [2:0] M_game_cu_alu_out_sel;
    logic [4:0] M_game_cu_regfile_wa;
    logic [4:0] M_game_cu_regfile_ra1;
    logic [4:0] M_game_cu_regfile_ra2;
    logic M_game_cu_regfile_we;
    logic [3:0] M_game_cu_debug;
    
    game_cu game_cu (
        .button1(button1),
        .button2(button2),
        .button3(button3),
        .button4(button4),
        .button5(button5),
        .button6(button6),
        .buttonstart(buttonstart),
        .rst(rst),
        .gameinterval(M_edge_detector_game_interval_out),
        .decrease_timer(M_edge_detector_game_timer_out),
        .clk(clk),
        .regfile_rd2(M_game_cu_regfile_rd2),
        .alufn(M_game_cu_alufn),
        .asel(M_game_cu_asel),
        .bsel(M_game_cu_bsel),
        .alu_out_sel(M_game_cu_alu_out_sel),
        .regfile_wa(M_game_cu_regfile_wa),
        .regfile_ra1(M_game_cu_regfile_ra1),
        .regfile_ra2(M_game_cu_regfile_ra2),
        .regfile_we(M_game_cu_regfile_we),
        .debug(M_game_cu_debug)
    );
    
    
    logic [31:0] M_game_regfiles_data;
    logic [31:0] M_game_regfiles_rd1;
    logic [31:0] M_game_regfiles_rd2;
    logic [31:0] M_game_regfiles_timerout;
    logic [31:0] M_game_regfiles_scoreout;
    logic [31:0] M_game_regfiles_buttonmapout;
    logic [31:0] M_game_regfiles_modeout;
    logic [31:0] M_game_regfiles_levelcounterout;
    logic [31:0] M_game_regfiles_awakeout;
    logic [31:0] M_game_regfiles_activebuttonout;
    logic [31:0] M_game_regfiles_activetypeout;
    logic [31:0] M_game_regfiles_cooldownout;
    logic [31:0] M_game_regfiles_setledout;
    logic [31:0] M_game_regfiles_cooltimerout;
    
    game_regfiles game_regfiles (
        .we(M_game_cu_regfile_we),
        .wa(M_game_cu_regfile_wa),
        .ra1(M_game_cu_regfile_ra1),
        .ra2(M_game_cu_regfile_ra2),
        .rst(rst),
        .clk(clk),
        .data(M_game_regfiles_data),
        .rd1(M_game_regfiles_rd1),
        .rd2(M_game_regfiles_rd2),
        .timerout(M_game_regfiles_timerout),
        .scoreout(M_game_regfiles_scoreout),
        .buttonmapout(M_game_regfiles_buttonmapout),
        .modeout(M_game_regfiles_modeout),
        .levelcounterout(M_game_regfiles_levelcounterout),
        .awakeout(M_game_regfiles_awakeout),
        .activebuttonout(M_game_regfiles_activebuttonout),
        .activetypeout(M_game_regfiles_activetypeout),
        .cooldownout(M_game_regfiles_cooldownout),
        .setledout(M_game_regfiles_setledout),
        .cooltimerout(M_game_regfiles_cooltimerout)
    );
    
    
    always @* begin
        M_game_cu_regfile_rd2 = M_game_regfiles_rd2;
        
        case (M_game_cu_asel)
            2'h0: begin
                input_alu_a = M_game_regfiles_rd1;
            end
            2'h1: begin
                input_alu_a = 3'h5;
            end
            2'h2: begin
                input_alu_a = 5'h14;
            end
            2'h3: begin
                input_alu_a = 7'h63;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_game_cu_bsel)
            4'h0: begin
                input_alu_b = M_game_regfiles_rd2;
            end
            4'h1: begin
                input_alu_b = 1'h1;
            end
            4'h2: begin
                input_alu_b = 2'h2;
            end
            4'h3: begin
                input_alu_b = 2'h3;
            end
            4'h4: begin
                input_alu_b = 3'h4;
            end
            4'h5: begin
                input_alu_b = 5'h14;
            end
            4'h6: begin
                input_alu_b = 7'h5a;
            end
            4'h7: begin
                input_alu_b = 7'h63;
            end
            4'h8: begin
                input_alu_b = 4'h8;
            end
            4'h9: begin
                input_alu_b = 5'h10;
            end
            4'ha: begin
                input_alu_b = 6'h20;
            end
            4'hb: begin
                input_alu_b = 7'h64;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_game_alu_a = input_alu_a;
        M_game_alu_b = input_alu_b;
        M_game_alu_alufn = M_game_cu_alufn;
        
        case (M_game_cu_alu_out_sel)
            3'h1: begin
                M_game_regfiles_data = 16'hffff;
            end
            3'h2: begin
                M_game_regfiles_data = 16'h1f1f;
            end
            3'h3: begin
                M_game_regfiles_data = 1'h0;
            end
            3'h4: begin
                M_game_regfiles_data = M_gen_rn_out;
            end
            default: begin
                M_game_regfiles_data = M_game_alu_out;
            end
        endcase
        timerout = M_game_regfiles_timerout;
        scoreout = M_game_regfiles_scoreout;
        buttonmapout = M_game_regfiles_buttonmapout;
        modeout = M_game_regfiles_modeout;
        levelcounterout = M_game_regfiles_levelcounterout;
        awakeout = M_game_regfiles_awakeout;
        activebuttonout = M_game_regfiles_activebuttonout;
        activetypeout = M_game_regfiles_activetypeout;
        cooldownout = M_game_regfiles_cooldownout;
        setledout = M_game_regfiles_setledout;
        cooltimerout = M_game_regfiles_cooltimerout;
        gameintervalblinker = M_game_interval_value;
        slow_clock_out = M_game_timer_clock_value;
        debug_general = M_game_cu_debug;
    end
    
    
endmodule