/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier (
        input wire [31:0] a,
        input wire [31:0] b,
        output reg [31:0] out
    );
    logic [31:0] R_0c9b8567_i;
    logic [31:0] RR_0c9b8567_i;
    logic [31:0] R_366622d4_j;
    logic [31:0] RR_366622d4_j;
    logic [31:0] R_6ff438b5_k;
    logic [31:0] RR_6ff438b5_k;
    logic [495:0] M_fa_a;
    logic [495:0] M_fa_b;
    logic [495:0] M_fa_cin;
    logic [495:0] M_fa_s;
    logic [495:0] M_fa_cout;
    
    genvar idx_0_773277000;
    
    generate
        for (idx_0_773277000 = 0; idx_0_773277000 < 496; idx_0_773277000 = idx_0_773277000 + 1) begin: forLoop_idx_0_773277000
            fa fa (
                .a(M_fa_a[idx_0_773277000]),
                .b(M_fa_b[idx_0_773277000]),
                .cin(M_fa_cin[idx_0_773277000]),
                .s(M_fa_s[idx_0_773277000]),
                .cout(M_fa_cout[idx_0_773277000])
            );
        end
    endgenerate
    
    
    logic [8:0] current_row_fa_index;
    logic [8:0] previous_row_fa_index;
    always @* begin
        M_fa_a = 496'h0;
        M_fa_b = 496'h0;
        M_fa_cin = 496'h0;
        out[1'h0] = b[1'h0] & a[1'h0];
        for (RR_0c9b8567_i = 0; RR_0c9b8567_i < 5'h1f; RR_0c9b8567_i = RR_0c9b8567_i + 1) begin
      R_0c9b8567_i = (1'h1) + RR_0c9b8567_i * (1);
            if (R_0c9b8567_i == 1'h1) begin
                for (RR_366622d4_j = 0; RR_366622d4_j < 5'h1f; RR_366622d4_j = RR_366622d4_j + 1) begin
          R_366622d4_j = (1'h0) + RR_366622d4_j * (1);
                    M_fa_a[R_366622d4_j] = a[R_366622d4_j] & b[1'h1];
                    M_fa_b[R_366622d4_j] = a[R_366622d4_j + 1'h1] & b[1'h0];
                    if (R_366622d4_j == 1'h0) begin
                        M_fa_cin[R_366622d4_j] = 1'h0;
                    end else begin
                        M_fa_cin[R_366622d4_j] = M_fa_cout[R_366622d4_j - 1'h1];
                    end
                end
                out[1'h1] = M_fa_s[1'h0];
                previous_row_fa_index = 1'h0;
                current_row_fa_index = 5'h1f;
            end else begin
                for (RR_6ff438b5_k = 0; RR_6ff438b5_k < 6'h20 - R_0c9b8567_i; RR_6ff438b5_k = RR_6ff438b5_k + 1) begin
          R_6ff438b5_k = (0) + RR_6ff438b5_k * (1);
                    M_fa_a[current_row_fa_index + R_6ff438b5_k] = a[R_6ff438b5_k] & b[R_0c9b8567_i];
                    M_fa_b[current_row_fa_index + R_6ff438b5_k] = M_fa_s[previous_row_fa_index + 1'h1 + R_6ff438b5_k];
                    if (R_6ff438b5_k == 1'h0) begin
                        M_fa_cin[current_row_fa_index + R_6ff438b5_k] = 1'h0;
                    end else begin
                        M_fa_cin[current_row_fa_index + R_6ff438b5_k] = M_fa_cout[current_row_fa_index + R_6ff438b5_k - 1'h1];
                    end
                end
                previous_row_fa_index = current_row_fa_index;
                current_row_fa_index = current_row_fa_index + (6'h20 - R_0c9b8567_i);
                out[R_0c9b8567_i] = M_fa_s[previous_row_fa_index];
            end
        end
        M_fa_a[9'h1ef] = a[1'h0] & b[5'h1f];
        M_fa_b[9'h1ef] = M_fa_s[9'h1ee];
        M_fa_cin[9'h1ef] = 1'h0;
        out[5'h1f] = M_fa_s[9'h1ef];
    end
    
    
endmodule