/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SEVEN_SEG_DIV = 5'h10;
    localparam SLOW_CLOCK_DIV = 5'h1a;
    localparam FAST_CLOCK_DIV = 5'h14;
    localparam INTERVAL_CLOCK_DIV = 5'h18;
    localparam _MP_STAGES_1975177396 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1975177396)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_RISE_1932367199 = 1'h1;
    localparam _MP_FALL_1932367199 = 1'h0;
    logic M_edge_det_b1_in;
    logic M_edge_det_b1_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1932367199),
        .FALL(_MP_FALL_1932367199)
    ) edge_det_b1 (
        .clk(clk),
        .in(M_edge_det_b1_in),
        .out(M_edge_det_b1_out)
    );
    
    
    localparam _MP_RISE_715586352 = 1'h1;
    localparam _MP_FALL_715586352 = 1'h0;
    logic M_edge_det_b2_in;
    logic M_edge_det_b2_out;
    
    edge_detector #(
        .RISE(_MP_RISE_715586352),
        .FALL(_MP_FALL_715586352)
    ) edge_det_b2 (
        .clk(clk),
        .in(M_edge_det_b2_in),
        .out(M_edge_det_b2_out)
    );
    
    
    localparam _MP_RISE_1535071023 = 1'h1;
    localparam _MP_FALL_1535071023 = 1'h0;
    logic M_edge_det_b3_in;
    logic M_edge_det_b3_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1535071023),
        .FALL(_MP_FALL_1535071023)
    ) edge_det_b3 (
        .clk(clk),
        .in(M_edge_det_b3_in),
        .out(M_edge_det_b3_out)
    );
    
    
    localparam _MP_RISE_896831963 = 1'h1;
    localparam _MP_FALL_896831963 = 1'h0;
    logic M_edge_det_b4_in;
    logic M_edge_det_b4_out;
    
    edge_detector #(
        .RISE(_MP_RISE_896831963),
        .FALL(_MP_FALL_896831963)
    ) edge_det_b4 (
        .clk(clk),
        .in(M_edge_det_b4_in),
        .out(M_edge_det_b4_out)
    );
    
    
    localparam _MP_RISE_1102312789 = 1'h1;
    localparam _MP_FALL_1102312789 = 1'h0;
    logic M_edge_det_b5_in;
    logic M_edge_det_b5_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1102312789),
        .FALL(_MP_FALL_1102312789)
    ) edge_det_b5 (
        .clk(clk),
        .in(M_edge_det_b5_in),
        .out(M_edge_det_b5_out)
    );
    
    
    localparam _MP_RISE_1662254119 = 1'h1;
    localparam _MP_FALL_1662254119 = 1'h0;
    logic M_edge_det_b6_in;
    logic M_edge_det_b6_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1662254119),
        .FALL(_MP_FALL_1662254119)
    ) edge_det_b6 (
        .clk(clk),
        .in(M_edge_det_b6_in),
        .out(M_edge_det_b6_out)
    );
    
    
    localparam _MP_RISE_1233601630 = 1'h1;
    localparam _MP_FALL_1233601630 = 1'h0;
    logic M_edge_det_start_in;
    logic M_edge_det_start_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1233601630),
        .FALL(_MP_FALL_1233601630)
    ) edge_det_start (
        .clk(clk),
        .in(M_edge_det_start_in),
        .out(M_edge_det_start_out)
    );
    
    
    localparam _MP_RISE_387617131 = 1'h1;
    localparam _MP_FALL_387617131 = 1'h0;
    logic M_edge_det_reset_in;
    logic M_edge_det_reset_out;
    
    edge_detector #(
        .RISE(_MP_RISE_387617131),
        .FALL(_MP_FALL_387617131)
    ) edge_det_reset (
        .clk(clk),
        .in(M_edge_det_reset_in),
        .out(M_edge_det_reset_out)
    );
    
    
    localparam _MP_CLK_FREQ_2062150110 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_2062150110 = 5'h14;
    localparam _MP_NUM_SYNC_2062150110 = 2'h2;
    logic M_btn_cond_b1_in;
    logic M_btn_cond_b1_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_2062150110),
        .MIN_DELAY(_MP_MIN_DELAY_2062150110),
        .NUM_SYNC(_MP_NUM_SYNC_2062150110)
    ) btn_cond_b1 (
        .clk(clk),
        .in(M_btn_cond_b1_in),
        .out(M_btn_cond_b1_out)
    );
    
    
    localparam _MP_CLK_FREQ_929992950 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_929992950 = 5'h14;
    localparam _MP_NUM_SYNC_929992950 = 2'h2;
    logic M_btn_cond_b2_in;
    logic M_btn_cond_b2_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_929992950),
        .MIN_DELAY(_MP_MIN_DELAY_929992950),
        .NUM_SYNC(_MP_NUM_SYNC_929992950)
    ) btn_cond_b2 (
        .clk(clk),
        .in(M_btn_cond_b2_in),
        .out(M_btn_cond_b2_out)
    );
    
    
    localparam _MP_CLK_FREQ_1168327984 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1168327984 = 5'h14;
    localparam _MP_NUM_SYNC_1168327984 = 2'h2;
    logic M_btn_cond_b3_in;
    logic M_btn_cond_b3_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1168327984),
        .MIN_DELAY(_MP_MIN_DELAY_1168327984),
        .NUM_SYNC(_MP_NUM_SYNC_1168327984)
    ) btn_cond_b3 (
        .clk(clk),
        .in(M_btn_cond_b3_in),
        .out(M_btn_cond_b3_out)
    );
    
    
    localparam _MP_CLK_FREQ_832953188 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_832953188 = 5'h14;
    localparam _MP_NUM_SYNC_832953188 = 2'h2;
    logic M_btn_cond_b4_in;
    logic M_btn_cond_b4_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_832953188),
        .MIN_DELAY(_MP_MIN_DELAY_832953188),
        .NUM_SYNC(_MP_NUM_SYNC_832953188)
    ) btn_cond_b4 (
        .clk(clk),
        .in(M_btn_cond_b4_in),
        .out(M_btn_cond_b4_out)
    );
    
    
    localparam _MP_CLK_FREQ_1702986727 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1702986727 = 5'h14;
    localparam _MP_NUM_SYNC_1702986727 = 2'h2;
    logic M_btn_cond_b5_in;
    logic M_btn_cond_b5_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1702986727),
        .MIN_DELAY(_MP_MIN_DELAY_1702986727),
        .NUM_SYNC(_MP_NUM_SYNC_1702986727)
    ) btn_cond_b5 (
        .clk(clk),
        .in(M_btn_cond_b5_in),
        .out(M_btn_cond_b5_out)
    );
    
    
    localparam _MP_CLK_FREQ_640370305 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_640370305 = 5'h14;
    localparam _MP_NUM_SYNC_640370305 = 2'h2;
    logic M_btn_cond_b6_in;
    logic M_btn_cond_b6_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_640370305),
        .MIN_DELAY(_MP_MIN_DELAY_640370305),
        .NUM_SYNC(_MP_NUM_SYNC_640370305)
    ) btn_cond_b6 (
        .clk(clk),
        .in(M_btn_cond_b6_in),
        .out(M_btn_cond_b6_out)
    );
    
    
    localparam _MP_CLK_FREQ_2038304177 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_2038304177 = 5'h14;
    localparam _MP_NUM_SYNC_2038304177 = 2'h2;
    logic M_btn_cond_start_in;
    logic M_btn_cond_start_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_2038304177),
        .MIN_DELAY(_MP_MIN_DELAY_2038304177),
        .NUM_SYNC(_MP_NUM_SYNC_2038304177)
    ) btn_cond_start (
        .clk(clk),
        .in(M_btn_cond_start_in),
        .out(M_btn_cond_start_out)
    );
    
    
    localparam _MP_CLK_FREQ_1721734913 = 27'h5f5e100;
    localparam _MP_MIN_DELAY_1721734913 = 5'h14;
    localparam _MP_NUM_SYNC_1721734913 = 2'h2;
    logic M_btn_cond_reset_in;
    logic M_btn_cond_reset_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1721734913),
        .MIN_DELAY(_MP_MIN_DELAY_1721734913),
        .NUM_SYNC(_MP_NUM_SYNC_1721734913)
    ) btn_cond_reset (
        .clk(clk),
        .in(M_btn_cond_reset_in),
        .out(M_btn_cond_reset_out)
    );
    
    
    localparam _MP_DIGITS_258522766 = 3'h4;
    localparam _MP_DIV_258522766 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_258522766),
        .DIV(_MP_DIV_258522766)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_SLOW_CLOCK_DIV_1621934373 = 5'h1a;
    localparam _MP_INTERVAL_CLOCK_DIV_1621934373 = 5'h18;
    localparam _MP_FAST_CLOCK_DIV_1621934373 = 5'h14;
    logic M_game_datapath_button1;
    logic M_game_datapath_button2;
    logic M_game_datapath_button3;
    logic M_game_datapath_button4;
    logic M_game_datapath_button5;
    logic M_game_datapath_button6;
    logic M_game_datapath_buttonstart;
    logic [31:0] M_game_datapath_timerout;
    logic [31:0] M_game_datapath_scoreout;
    logic [31:0] M_game_datapath_buttonmapout;
    logic [31:0] M_game_datapath_modeout;
    logic [31:0] M_game_datapath_levelcounterout;
    logic [31:0] M_game_datapath_awakeout;
    logic [31:0] M_game_datapath_activebuttonout;
    logic [31:0] M_game_datapath_activetypeout;
    logic [31:0] M_game_datapath_cooldownout;
    logic [31:0] M_game_datapath_setledout;
    logic [31:0] M_game_datapath_cooltimerout;
    logic M_game_datapath_gameintervalblinker;
    logic M_game_datapath_slow_clock_out;
    logic [3:0] M_game_datapath_debug_general;
    
    game_datapath #(
        .SLOW_CLOCK_DIV(_MP_SLOW_CLOCK_DIV_1621934373),
        .INTERVAL_CLOCK_DIV(_MP_INTERVAL_CLOCK_DIV_1621934373),
        .FAST_CLOCK_DIV(_MP_FAST_CLOCK_DIV_1621934373)
    ) game_datapath (
        .clk(clk),
        .rst(rst),
        .button1(M_game_datapath_button1),
        .button2(M_game_datapath_button2),
        .button3(M_game_datapath_button3),
        .button4(M_game_datapath_button4),
        .button5(M_game_datapath_button5),
        .button6(M_game_datapath_button6),
        .buttonstart(M_game_datapath_buttonstart),
        .timerout(M_game_datapath_timerout),
        .scoreout(M_game_datapath_scoreout),
        .buttonmapout(M_game_datapath_buttonmapout),
        .modeout(M_game_datapath_modeout),
        .levelcounterout(M_game_datapath_levelcounterout),
        .awakeout(M_game_datapath_awakeout),
        .activebuttonout(M_game_datapath_activebuttonout),
        .activetypeout(M_game_datapath_activetypeout),
        .cooldownout(M_game_datapath_cooldownout),
        .setledout(M_game_datapath_setledout),
        .cooltimerout(M_game_datapath_cooltimerout),
        .gameintervalblinker(M_game_datapath_gameintervalblinker),
        .slow_clock_out(M_game_datapath_slow_clock_out),
        .debug_general(M_game_datapath_debug_general)
    );
    
    
    localparam _MP_DIGITS_2004837023 = 3'h4;
    localparam _MP_LEADING_ZEROS_2004837023 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_2004837023),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_2004837023)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        usb_tx = usb_rx;
        led = 8'h0;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 8'hff;
        io_select = 4'hf;
        M_btn_cond_b1_in = io_button[1'h0];
        M_btn_cond_b2_in = io_button[2'h2];
        M_btn_cond_b3_in = io_button[2'h3];
        M_btn_cond_b4_in = io_button[3'h4];
        M_btn_cond_b5_in = io_dip[1'h0][1'h0];
        M_btn_cond_b6_in = io_dip[1'h0][1'h1];
        M_btn_cond_start_in = io_button[1'h1];
        M_btn_cond_reset_in = io_dip[2'h2][3'h7];
        M_edge_det_b1_in = M_btn_cond_b1_out;
        M_edge_det_b2_in = M_btn_cond_b2_out;
        M_edge_det_b3_in = M_btn_cond_b3_out;
        M_edge_det_b4_in = M_btn_cond_b4_out;
        M_edge_det_b5_in = M_btn_cond_b5_out;
        M_edge_det_b6_in = M_btn_cond_b6_out;
        M_edge_det_start_in = M_btn_cond_start_out;
        M_edge_det_reset_in = M_btn_cond_reset_out;
        M_game_datapath_button1 = M_edge_det_b1_out;
        M_game_datapath_button2 = M_edge_det_b2_out;
        M_game_datapath_button3 = M_edge_det_b3_out;
        M_game_datapath_button4 = M_edge_det_b4_out;
        M_game_datapath_button5 = M_edge_det_b5_out;
        M_game_datapath_button6 = M_edge_det_b6_out;
        M_game_datapath_buttonstart = M_edge_det_start_out;
        rst = M_edge_det_reset_out;
        M_seg_values = {{4'h0, 4'h0, 4'h0, 4'h0}};
        M_decimal_renderer_value = M_game_datapath_cooltimerout;
        M_seg_values = M_decimal_renderer_digits;
        io_led[2'h2][1'h0] = M_game_datapath_setledout[1'h0];
        io_led[2'h2][3'h5] = 1'h0;
        io_led[2'h2][3'h6] = ~M_game_datapath_levelcounterout[1'h0];
        io_led[2'h2][3'h7] = ~M_game_datapath_levelcounterout[1'h1];
        io_led[1'h0] = M_game_datapath_activebuttonout;
        io_led[1'h1] = M_game_datapath_activetypeout;
        
        case (io_dip[2'h2][3'h7])
            1'h1: begin
                
                case (M_game_datapath_activebuttonout)
                    1'h1: begin
                        io_led[1'h0] = 8'hff;
                    end
                    2'h2: begin
                        io_led[1'h0] = 8'hfe;
                    end
                    3'h4: begin
                        io_led[1'h0] = 8'hfc;
                    end
                    4'h8: begin
                        io_led[1'h0] = 8'hf0;
                    end
                    5'h10: begin
                        io_led[1'h0] = 8'he0;
                    end
                    6'h20: begin
                        io_led[1'h0] = 8'hc0;
                    end
                    default: begin
                        io_led[1'h0] = 8'h80;
                    end
                endcase
            end
            default: begin
                io_led[1'h0] = M_game_datapath_activebuttonout;
            end
        endcase
        io_segment = ~M_seg_seg;
        io_select = M_seg_sel;
    end
    
    
endmodule