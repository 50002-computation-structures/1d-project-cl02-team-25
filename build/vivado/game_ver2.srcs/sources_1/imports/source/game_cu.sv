/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_cu (
        input wire clk,
        input wire rst,
        input wire interval1,
        input wire interval2,
        input wire interval3,
        input wire decrease_timer,
        input wire [31:0] regfile_rd2,
        input wire button1,
        input wire button2,
        input wire button3,
        input wire button4,
        input wire button5,
        input wire button6,
        input wire buttonstart,
        output reg [5:0] alufn,
        output reg [1:0] asel,
        output reg [3:0] bsel,
        output reg [2:0] alu_out_sel,
        output reg [4:0] regfile_wa,
        output reg [4:0] regfile_ra1,
        output reg [4:0] regfile_ra2,
        output reg regfile_we,
        output reg [3:0] debug
    );
    localparam E_GameStates_START_SET_TIMER = 5'h0;
    localparam E_GameStates_WAIT_TO_START = 5'h1;
    localparam E_GameStates_IDLE = 5'h2;
    localparam E_GameStates_CHECK_TIMER_EQ0 = 5'h3;
    localparam E_GameStates_BRANCH_TIMER_EQ0 = 5'h4;
    localparam E_GameStates_DECREASE_TIMER = 5'h5;
    localparam E_GameStates_INTERVAL_CHECK_LEVEL1 = 5'h6;
    localparam E_GameStates_INTERVAL_CHECK_LEVEL2 = 5'h7;
    localparam E_GameStates_INTERVAL_CHECK_LEVEL3 = 5'h8;
    localparam E_GameStates_BRANCH_INTERVAL_CHECK_LEVEL1 = 5'h9;
    localparam E_GameStates_BRANCH_INTERVAL_CHECK_LEVEL2 = 5'ha;
    localparam E_GameStates_BRANCH_INTERVAL_CHECK_LEVEL3 = 5'hb;
    localparam E_GameStates_MODE_CHECK_EQ1 = 5'hc;
    localparam E_GameStates_BRANCH_MODE_CHECK_EQ1 = 5'hd;
    localparam E_GameStates_MODE_CHECK_EQ0 = 5'he;
    localparam E_GameStates_BRANCH_MODE_CHECK_EQ0 = 5'hf;
    localparam E_GameStates_COOLDOWN_EQ0 = 5'h10;
    localparam E_GameStates_BRANCH_COOLDOWN_EQ0 = 5'h11;
    localparam E_GameStates_DECREASE_COOLDOWN = 5'h12;
    localparam E_GameStates_RESET_MODE_1 = 5'h13;
    localparam E_GameStates_AWAKE_EQ0 = 5'h14;
    localparam E_GameStates_BRANCH_AWAKE_EQ0 = 5'h15;
    localparam E_GameStates_DECREASE_AWAKE = 5'h16;
    localparam E_GameStates_RESET_MODE_0 = 5'h17;
    localparam E_GameStates_GENERATE_BUTTONMAP = 5'h18;
    localparam E_GameStates_SET_ACTIVE_BUTTON = 5'h19;
    localparam E_GameStates_SET_ACTIVE_TYPE = 5'h1a;
    localparam E_GameStates_SET_AWAKE = 5'h1b;
    localparam E_GameStates_SET_COOLDOWN = 5'h1c;
    localparam E_GameStates_RESET_MODE_2 = 5'h1d;
    localparam E_GameStates_END = 5'h1e;
    logic [4:0] D_game_fsm_d, D_game_fsm_q = 5'h0;
    always @* begin
        D_game_fsm_d = D_game_fsm_q;
        
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 1'h0;
        alu_out_sel = 1'h0;
        regfile_wa = 4'h9;
        regfile_ra1 = 1'h0;
        regfile_ra2 = 1'h0;
        regfile_we = 1'h0;
        debug = 1'h0;
        D_game_fsm_d = D_game_fsm_q;
        if (rst) begin
            D_game_fsm_d = 5'h0;
        end else begin
            
            case (D_game_fsm_q)
                5'h0: begin
                    alufn = 6'h0;
                    regfile_ra1 = 1'h0;
                    asel = 2'h0;
                    bsel = 4'h8;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h0;
                    D_game_fsm_d = 5'h1;
                end
                5'h1: begin
                    if (buttonstart) begin
                        D_game_fsm_d = 5'h2;
                    end else begin
                        D_game_fsm_d = 5'h1;
                    end
                end
                5'h3: begin
                    alufn = 6'h33;
                    regfile_ra1 = 1'h0;
                    regfile_ra2 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'h4;
                end
                5'h4: begin
                    regfile_ra2 = 4'h9;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'h1e;
                    end else begin
                        D_game_fsm_d = 5'h5;
                    end
                end
                5'h5: begin
                    alufn = 6'h1;
                    regfile_ra1 = 1'h0;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h0;
                    D_game_fsm_d = 5'h2;
                end
                5'h6: begin
                    alufn = 6'h33;
                    regfile_ra1 = 3'h4;
                    regfile_ra2 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'h9;
                end
                5'h9: begin
                    regfile_ra2 = 4'h9;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'hc;
                    end else begin
                        D_game_fsm_d = 5'h2;
                    end
                end
                5'h7: begin
                    alufn = 6'h33;
                    regfile_ra1 = 3'h4;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'ha;
                end
                5'ha: begin
                    regfile_ra2 = 4'h9;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'hc;
                    end else begin
                        D_game_fsm_d = 5'h2;
                    end
                end
                5'h8: begin
                    alufn = 6'h33;
                    regfile_ra1 = 3'h4;
                    asel = 2'h0;
                    bsel = 4'h2;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'hb;
                end
                5'hb: begin
                    regfile_ra2 = 4'h9;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'hc;
                    end else begin
                        D_game_fsm_d = 5'h2;
                    end
                end
                5'hc: begin
                    alufn = 6'h33;
                    regfile_ra1 = 2'h3;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'hd;
                end
                5'hd: begin
                    regfile_ra2 = 4'h9;
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h1;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'h18;
                    end else begin
                        D_game_fsm_d = 5'he;
                    end
                end
                5'he: begin
                    alufn = 6'h33;
                    regfile_ra1 = 2'h3;
                    regfile_ra2 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'hf;
                end
                5'hf: begin
                    regfile_ra2 = 4'h9;
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h2;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h1;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'h10;
                    end else begin
                        D_game_fsm_d = 5'h14;
                    end
                end
                5'h10: begin
                    alufn = 6'h33;
                    regfile_ra1 = 4'h8;
                    regfile_ra2 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'h11;
                end
                5'h11: begin
                    regfile_ra2 = 4'h9;
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h3;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h1;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'h13;
                    end else begin
                        D_game_fsm_d = 5'h12;
                    end
                end
                5'h12: begin
                    alufn = 6'h1;
                    regfile_ra1 = 4'h8;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h8;
                    D_game_fsm_d = 5'h2;
                end
                5'h13: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 2'h3;
                    D_game_fsm_d = 5'h2;
                end
                5'h14: begin
                    alufn = 6'h33;
                    regfile_ra1 = 3'h5;
                    regfile_ra2 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h9;
                    D_game_fsm_d = 5'h15;
                end
                5'h15: begin
                    regfile_ra2 = 4'h9;
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h5;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h1;
                    if (regfile_rd2[1'h0]) begin
                        D_game_fsm_d = 5'h17;
                    end else begin
                        D_game_fsm_d = 5'h16;
                    end
                end
                5'h16: begin
                    alufn = 6'h1;
                    regfile_ra1 = 3'h5;
                    asel = 2'h0;
                    bsel = 4'h1;
                    regfile_we = 1'h1;
                    regfile_wa = 3'h5;
                    D_game_fsm_d = 5'h2;
                end
                5'h17: begin
                    alufn = 6'h1;
                    asel = 2'h1;
                    bsel = 4'h5;
                    regfile_we = 1'h1;
                    regfile_wa = 2'h3;
                    D_game_fsm_d = 5'h2;
                end
                5'h18: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h4;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h1;
                    D_game_fsm_d = 5'h19;
                end
                5'h19: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h5;
                    regfile_we = 1'h1;
                    regfile_wa = 3'h6;
                    D_game_fsm_d = 5'h1a;
                end
                5'h1a: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h5;
                    regfile_we = 1'h1;
                    regfile_wa = 3'h7;
                    D_game_fsm_d = 5'h1b;
                end
                5'h1b: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h5;
                    regfile_we = 1'h1;
                    regfile_wa = 3'h5;
                    D_game_fsm_d = 5'h1c;
                end
                5'h1c: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h5;
                    regfile_we = 1'h1;
                    regfile_wa = 4'h8;
                    D_game_fsm_d = 5'h1d;
                end
                5'h1d: begin
                    alufn = 6'h0;
                    regfile_ra1 = 5'h1f;
                    asel = 2'h0;
                    bsel = 4'h2;
                    regfile_we = 1'h1;
                    regfile_wa = 2'h3;
                    D_game_fsm_d = 5'h2;
                end
                5'h1e: begin
                    alu_out_sel = 2'h1;
                    D_game_fsm_d = 5'h1e;
                end
                5'h2: begin
                    if (decrease_timer) begin
                        D_game_fsm_d = 5'h3;
                    end else begin
                        if (interval1) begin
                            D_game_fsm_d = 5'h6;
                        end else begin
                            if (interval2) begin
                                D_game_fsm_d = 5'h7;
                            end else begin
                                if (interval3) begin
                                    D_game_fsm_d = 5'h8;
                                end else begin
                                    D_game_fsm_d = 5'h2;
                                end
                            end
                        end
                    end
                end
            endcase
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_game_fsm_q <= 5'h0;
        end else begin
            D_game_fsm_q <= D_game_fsm_d;
        end
    end
endmodule